# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"

# spring.datasource.url=jdbc:mysql://localhost:3306/ecommerce?useSSL=false

#spring.datasource.url=jdbc:mysql://mysql:3306/ecommerce?useSSL=false

spring.datasource.url=jdbc:mysql://mysql:3306/ecommerce?useSSL=false

spring.datasource.driver-class-name=com.mysql.jdbc.Driver


# Username and secret
spring.datasource.username = root
spring.datasource.password = orikorik


# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update


spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect



## File Storage Properties
# All files uploaded through the REST API will be stored in this directory
file.upload-dir=./uploads

spring.mail.host = smtp.gmail.com
spring.mail.username =orikhoxha1@gmail.com
spring.mail.password =orik_oxa_0448052
spring.mail.properties.mail.smtp.auth = true
spring.mail.properties.mail.smtp.socketFactory.port = 465
spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory
spring.mail.properties.mail.smtp.socketFactory.fallback = false
